(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{339:function(t,a,s){t.exports=s.p+"assets/img/2020-01-23-09-54-49.8efdfbf4.png"},532:function(t,a,s){"use strict";s.r(a);var n=s(17),v=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"问题-ignore-true"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题-ignore-true"}},[t._v("#")]),t._v(" 问题 {ignore=true}")]),t._v(" "),n("p",[t._v("[TOC]")]),t._v(" "),n("h2",{attrs:{id:"数学基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数学基础"}},[t._v("#")]),t._v(" 数学基础")]),t._v(" "),n("ol",[n("li",[t._v("解释什么是极大似然估计？")]),t._v(" "),n("li",[t._v("贝叶斯公式")]),t._v(" "),n("li",[t._v("贝塔分布")]),t._v(" "),n("li",[t._v("指数组分布")]),t._v(" "),n("li",[t._v("多元正太分布")]),t._v(" "),n("li",[t._v("最大后验估计")]),t._v(" "),n("li",[t._v("相关性衡量")]),t._v(" "),n("li",[t._v("大数定律")]),t._v(" "),n("li",[t._v("中心极限定律")]),t._v(" "),n("li",[t._v("假设检验和 p 值")]),t._v(" "),n("li",[t._v("拉格朗日乘子法")]),t._v(" "),n("li",[t._v("对偶法")]),t._v(" "),n("li",[t._v("最优化")])]),t._v(" "),n("p",[t._v("从单位圆盘上随机选择一点，距离圆心的距离期望是多少？")]),t._v(" "),n("h2",{attrs:{id:"机器学习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#机器学习"}},[t._v("#")]),t._v(" 机器学习")]),t._v(" "),n("h3",{attrs:{id:"一般理论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一般理论"}},[t._v("#")]),t._v(" 一般理论")]),t._v(" "),n("ol",[n("li",[t._v("偏差-方差权衡")]),t._v(" "),n("li",[t._v("生成模型和判别模型的区别")]),t._v(" "),n("li",[t._v("过拟合和欠拟合")]),t._v(" "),n("li",[t._v("VC 维度\n3")])]),t._v(" "),n("p",[n("strong",[t._v("如何防止模型过拟合")]),t._v("\nEarly Stopping、数据集扩充、正则化法 以及 dropout， 决策树剪枝\n标签平滑")]),t._v(" "),n("p",[n("strong",[t._v("生成算法和判别算法的区别")])]),t._v(" "),n("ol",[n("li",[t._v("你常用的评估模型的指标有哪些？")]),t._v(" "),n("li",[t._v("如何处理不平衡数据\n"),n("ol",[n("li",[t._v("选择合适的评价指标")]),t._v(" "),n("li",[t._v("抽样")]),t._v(" "),n("li",[t._v("设计损失函数")])])])]),t._v(" "),n("p",[t._v("特征处理(包括获取、编码、归一化、处理流程等)，模型使用(开源还是自行开发，为什么这样选择)，评价方法(准召率以及其他考量，在线指标还是离线评估)")]),t._v(" "),n("h3",{attrs:{id:"模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模型"}},[t._v("#")]),t._v(" 模型")]),t._v(" "),n("ol",[n("li",[t._v("广义线性模型 GLM")]),t._v(" "),n("li",[t._v("逻辑回归")]),t._v(" "),n("li",[t._v("广义线性混合模型 GLMM")]),t._v(" "),n("li",[t._v("高斯判别分析 GDA")]),t._v(" "),n("li",[t._v("SVM")]),t._v(" "),n("li",[t._v("关联规则")]),t._v(" "),n("li",[t._v("MCMC")]),t._v(" "),n("li",[t._v("GBDT\n"),n("ol",[n("li",[t._v("xgboost")]),t._v(" "),n("li",[t._v("lightgbm")]),t._v(" "),n("li",[t._v("adaboost")])])]),t._v(" "),n("li",[t._v("随机森林")]),t._v(" "),n("li",[t._v("矩阵分解")]),t._v(" "),n("li",[t._v("协同过滤")]),t._v(" "),n("li",[t._v("FM")]),t._v(" "),n("li",[t._v("FFM")]),t._v(" "),n("li",[t._v("DeeoFM")]),t._v(" "),n("li",[t._v("朴素贝叶斯")]),t._v(" "),n("li",[t._v("EM")]),t._v(" "),n("li",[t._v("KNN")]),t._v(" "),n("li",[t._v("PCA")]),t._v(" "),n("li",[t._v("K-means")]),t._v(" "),n("li",[t._v("CRF")]),t._v(" "),n("li",[t._v("HMM")]),t._v(" "),n("li",[t._v("概率图模型")]),t._v(" "),n("li",[t._v("MDP")]),t._v(" "),n("li",[t._v("Bayes Network")]),t._v(" "),n("li",[t._v("变分推断")]),t._v(" "),n("li",[t._v("模拟退火")]),t._v(" "),n("li",[t._v("RBM")])]),t._v(" "),n("ul",[n("li",[t._v("[ ] 加权逻辑回归")])]),t._v(" "),n("h3",{attrs:{id:"特征选择方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特征选择方法"}},[t._v("#")]),t._v(" 特征选择方法")]),t._v(" "),n("h3",{attrs:{id:"误差函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#误差函数"}},[t._v("#")]),t._v(" 误差函数")]),t._v(" "),n("h3",{attrs:{id:"模型评估"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模型评估"}},[t._v("#")]),t._v(" 模型评估")]),t._v(" "),n("h2",{attrs:{id:"深度学习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深度学习"}},[t._v("#")]),t._v(" 深度学习")]),t._v(" "),n("ol",[n("li",[t._v("MLP")]),t._v(" "),n("li",[t._v("DCN\n"),n("ol",[n("li",[t._v("1*1 的卷积核 有什么用")]),t._v(" "),n("li",[t._v("常见的网络结构异同，例如 Alex Net , VGG Net")])])]),t._v(" "),n("li",[t._v("Word2vec")]),t._v(" "),n("li",[t._v("LSTM")]),t._v(" "),n("li",[t._v("GAN")]),t._v(" "),n("li",[t._v("wide&deep")]),t._v(" "),n("li",[t._v("attention")]),t._v(" "),n("li",[t._v("Transformer")]),t._v(" "),n("li",[t._v("CapsNet")]),t._v(" "),n("li",[t._v("什么是 Inception ?\n"),n("ul",[n("li",[t._v("GoogleNet 中的模块")]),t._v(" "),n("li",[t._v("引入的场景： 为卷积操作选择合适的卷积核大小比较困难。")]),t._v(" "),n("li",[t._v("Inception 的思路是：在同一层级上运行具有多个尺寸的滤波器，并级联输出。网络本质上会变得稍微宽一些")]),t._v(" "),n("li")])])]),t._v(" "),n("p",[t._v("使用用户历史点击／下单的 POI 序列来刻画用户偏好，行为序列中每个 POI 的相关属性通过 embedding 的方式进行映射并通过 pooling 的方式聚合,这种方式有什么不足？")]),t._v(" "),n("ol",[n("li",[t._v("没有利用到这个特征的时序信息")]),t._v(" "),n("li",[t._v("模型无法区分序列中不同行为的权重")])]),t._v(" "),n("h2",{attrs:{id:"数据结构与算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[t._v("#")]),t._v(" 数据结构与算法")]),t._v(" "),n("p",[t._v("字典树")]),t._v(" "),n("h2",{attrs:{id:"编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编程"}},[t._v("#")]),t._v(" 编程")]),t._v(" "),n("ol",[n("li",[t._v("python")])]),t._v(" "),n("p",[t._v("topK 问题")]),t._v(" "),n("p",[t._v("显然全排序的复杂度为 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("∗")]),n("mi",[t._v("l")]),n("mi",[t._v("g")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v(")")]),n("mo",[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n*lg(n))")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),n("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"base textstyle uncramped"},[n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mbin"},[t._v("∗")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[t._v("g")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(", 而冒泡的话是可以做到 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("∗")]),n("mi",[t._v("k")]),n("mo",[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n*k)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),n("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"base textstyle uncramped"},[n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mbin"},[t._v("∗")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 的，但其实冒泡的话，k 个元素也是排序的，这并不必要 ，因此，可以继续优化为堆。具体的，维护一个小顶堆。\n接着，从第 k+1 个元素开始扫描，和堆顶（堆中最小的元素）比较，如果被扫描的元素大于堆顶，则替换堆顶的元素，并调整堆，以保证堆内的 k 个元素，总是当前最大的 k 个元素。复杂度 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("O")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("∗")]),n("mi",[t._v("l")]),n("mi",[t._v("g")]),n("mo",[t._v("(")]),n("mi",[t._v("k")]),n("mo",[t._v(")")]),n("mo",[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(n*lg(k))")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),n("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"base textstyle uncramped"},[n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mbin"},[t._v("∗")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[t._v("g")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03148em"}},[t._v("k")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mclose"},[t._v(")")])])])])]),t._v(" "),n("p",[t._v("另外，可以用二分法找到第 k 大的数，然后做一次划分。这种方法也称随机选择算法。 它的时间复杂度是 O(n)。")]),t._v(" "),n("p",[t._v("python 中，is 和 == 的区别？\nis 是对比地址,==是对比值")]),t._v(" "),n("p",[n("strong",[t._v("青蛙爬楼问题")]),t._v("\n每步可上 1 或 2 级台阶，问 N 级台阶的上法有多少种？")]),t._v(" "),n("p",[t._v("错误的想法： 先上到 N-2，然后有两种选择，所以 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("f")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v(")")]),n("mo",[t._v("=")]),n("mi",[t._v("f")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v(")")]),n("mo",[t._v("+")]),n("mn",[t._v("2")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("f(n) = f(n) + 2")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),n("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"base textstyle uncramped"},[n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mord mathrm"},[t._v("2")])])])]),t._v("\n错误之处在于： N-2 未必一定是到达的，也有可能是跳过的。\n正确的想法： 最后一步，要么跳一下，要么跳两下，因此 "),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",[n("semantics",[n("mrow",[n("mi",[t._v("f")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v(")")]),n("mo",[t._v("=")]),n("mi",[t._v("f")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("−")]),n("mn",[t._v("1")]),n("mo",[t._v(")")]),n("mo",[t._v("+")]),n("mi",[t._v("f")]),n("mo",[t._v("(")]),n("mi",[t._v("n")]),n("mo",[t._v("−")]),n("mn",[t._v("2")]),n("mo",[t._v(")")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("f(n) = f(n-1) + f(n-2)")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),n("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"base textstyle uncramped"},[n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mrel"},[t._v("=")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mord mathrm"},[t._v("1")]),n("span",{staticClass:"mclose"},[t._v(")")]),n("span",{staticClass:"mbin"},[t._v("+")]),n("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")]),n("span",{staticClass:"mopen"},[t._v("(")]),n("span",{staticClass:"mord mathit"},[t._v("n")]),n("span",{staticClass:"mbin"},[t._v("−")]),n("span",{staticClass:"mord mathrm"},[t._v("2")]),n("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("\n其实就是斐波那契数列")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" functools "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" wraps\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# functools.wraps 是包装器的装饰器，不加也不会影响装饰器工作，但加上之后，函数的名称和help函数不会失效")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("memo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    cache"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@wraps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wrap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" args "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("func"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" wrap\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@memo")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fib"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("fib"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("迭代形式")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b\n        n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" b\n\n")])])]),n("p",[n("strong",[t._v("公平的洗牌算法")])]),t._v(" "),n("p",[t._v("什么是公平？")]),t._v(" "),n("p",[t._v("全排列中随机抽一个是最公平的，但是复杂度太高（n 的阶乘）！")]),t._v(" "),n("p",[t._v("Knuth 洗牌算法")]),t._v(" "),n("p",[n("img",{attrs:{src:s(339),alt:""}}),t._v("\n复杂度是线性的。")]),t._v(" "),n("h2",{attrs:{id:"大数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#大数据"}},[t._v("#")]),t._v(" 大数据")]),t._v(" "),n("p",[t._v("有一个好友列表，其中第一列是用户，后面的列是用户关注的好友。要求 找出每两个好友的共同好友。")]),t._v(" "),n("h2",{attrs:{id:"工业"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工业"}},[t._v("#")]),t._v(" 工业")]),t._v(" "),n("ol",[n("li",[t._v("AB test 样本量如何确定？")])]),t._v(" "),n("h3",{attrs:{id:"场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),n("ol",[n("li",[t._v("完整的数据挖掘、机器学习项目的流程。")]),t._v(" "),n("li",[t._v("如何预测蔬菜价格。\n提几个特征做预测模型：肉的价格、土壤健康指标、天气情况、国民收入、货币汇率等等。")]),t._v(" "),n("li",[t._v("广告位置只有一个，如何在满足约束最优？")])]),t._v(" "),n("h2",{attrs:{id:"务虚"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#务虚"}},[t._v("#")]),t._v(" 务虚")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("你觉得人生至此你最重要的成就，或者最令你骄傲的东西是什么？")])]),t._v(" "),n("li",[n("p",[t._v('你上一次通过「没有遵守世俗的规则」而获取了某种优势，或者为自己赢得了某种机会的经历是怎么样的？（英文解释：Have you ever hacked something to your advantage? ——"Hacked" in the sense of beating the system, not breaking into computers.）')])]),t._v(" "),n("li",[n("p",[t._v("你有什么样的兴趣和爱好？你为其付出过怎样的努力与代价？")])]),t._v(" "),n("li",[n("p",[t._v("向我推荐一部你非常喜欢的作品（领域不限），说说你为什么会喜欢它？")])]),t._v(" "),n("li",[n("p",[t._v("在你的生活中可以接触到的人里面，你觉得谁会讨厌你或者不太喜欢你？在你的想象中，他们不喜欢你的原因会是什么？")])]),t._v(" "),n("li",[n("p",[t._v("你人生至此印象比较深刻的一次失败或者一个后悔是什么？")])]),t._v(" "),n("li",[n("p",[t._v("你认为如果把「学习能力」向下拆分，可以拆分成哪些更细节的能力？其中你比较擅长哪一个？最不擅长哪一个？")])]),t._v(" "),n("li",[n("p",[t._v("你觉得谁是自己学习过的最好的老师？为什么？以及 TA 的局限性是什么？")])]),t._v(" "),n("li",[n("p",[t._v("What important truth do very few people agree with you on?（这一题当时是需英文作答）")])]),t._v(" "),n("li",[n("p",[t._v("如何给盲人描述黄色？")]),t._v(" "),n("ol",[n("li",[t._v("先天还是后天？")])])]),t._v(" "),n("li",[n("p",[t._v("美团、百度和淘宝的搜索场景有什么不同？")]),t._v(" "),n("ol",[n("li",[t._v("目标： 交易、相关性")]),t._v(" "),n("li",[t._v("数据结构化程度")]),t._v(" "),n("li",[t._v("位置约束进而供给约束")]),t._v(" "),n("li",[t._v("能力的侧重")])])]),t._v(" "),n("li")]),t._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://pan.baidu.com/s/1z_qU6_5yHpmzLQ0khDxXJg",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Data Science Interview Study Guide"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://legacy.gitbook.com/book/shunliz/machine-learning/details",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitbook: machine learning"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:""}},[t._v("book: Foundations of Data Science")])]),t._v(" "),n("li")])])}),[],!1,null,null,null);a.default=v.exports}}]);